(page "index.html"
  (:refer-clojure :exclude
    [test])
  (:refer-hoplon :exclude [rt])
  (:require
    [hoplon.ui :as u]
    [hoplon.ui.value :refer [ev rt hx px]]))

(defc things [0 1 2])

(def metadata
  [{:property "og:url"                   :content "http://www.mysite.com/"}
   {:name    "image_src"                 :content "http://www.mysite.com/images/logo-fb.png"}
   {:property "og:image"                 :content "http://www.mysite.com/images/logo-180.png"}
   {:property "og:image:width"           :content "180"}
   {:property "og:image:height"          :content "110"}
   {:property "og:image"                 :content "http://www.mysite.com/images/logo-250.png"}
   {:property "og:image:width"           :content "250"}
   {:property "og:image:height"          :content "250"}
   {:content  "text/html; charset=UTF-8" :http-equiv "content-type"}])

;;; styles ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def sm 736)
(def lg 1069)

(def gutter 6)

(def stroke-grey (hx 0xCCC))
(def fill-grey   (hx 0xEEE))
(def font-grey   (hx 0x888))

(def fail-color  (hx 0xd43f3a))
(def pass-color  (hx 0x4cae4c))

;;; views ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defelem suite [{:keys [title pass code] :as attrs} elems]
  (u/elem :w (rt 1 1) :h (rt 1 1) :p gutter :g gutter
    (u/elem :w (rt 1 1) :ph gutter
      (u/elem :f 21 :fc font-grey
        title)
      (u/elem :cr 0 :p gutter :ah :right :c fill-grey :s 1 :sc stroke-grey :r 3
        code))
    (dissoc attrs :code :pass :title) elems))

(defelem box [attrs elems]
  (u/elem :w 40 :h 40 :ah :center :av :middle :c (hx 0xFFF) :s 2 :sc stroke-grey
    attrs elems))

(defelem test [{:keys [title pass] :as attrs} elems]
  (u/elem :w 200
    (u/elem :h 26 :ph gutter :gh gutter :av :middle
      (u/elem :h 6 :w 6 :r 6 :c (cell= (if pass pass-color fail-color)))
      (u/elem :w 170 :f 10 :fc font-grey :vh :hidden title))
    (u/elem :w 200 :h 200 :p gutter :g gutter :c fill-grey :s 2 :sc stroke-grey :d 3 :dc (hx 0xAAA)
      (dissoc attrs :pass :title)
      elems)))

(u/window
  :title    "Hoplon UI"
  :route    [["tests"] {:foo "bar" :baz "barf"}]
  :metadata metadata
  (u/elem :w (rt 1 1) :p 6 :av :middle :sb 2 :sc stroke-grey
    (u/image :h 50 :url "hoplon-logo.png")
    (u/elem :pl 6 :f 21 "Hoplon UI Live Reference & Functional Tests"))
  (suite :title "align horizontal & align vertical" :code ":ah [:left :right :center] :av [:top :middle :bottom]" :pass false
    (test :ah :left   :av :top    :title "box aligns horizontal left & vertical top" :pass true
      (box "a"))
    (test :ah :center :av :top    :title "box aligns horizontal center & vertical top" :pass true
      (box "a"))
    (test :ah :right  :av :top    :title "box aligns horizontal right & vertical top" :pass true
      (box "a"))
    (test :ah :left   :av :middle :title "box aligns horizontal left & vertical middle" :pass true
      (box "a"))
    (test :ah :center :av :middle :title "box aligns horizontal center & vertical middle" :pass true
      (box "a"))
    (test :ah :right  :av :middle :title "box aligns horizontal right & vertical middle" :pass true
      (box "a"))
    (test :ah :left   :av :bottom :title "box aligns horizontal left & vertical bottom" :pass true
      (box "a"))
    (test :ah :center :av :bottom :title "box aligns horizontal center & vertical bottom" :pass true
      (box "a"))
    (test :ah :right  :av :bottom :title "box aligns horizontal right & vertical bottom" :pass true
      (box "a"))
    (test :ah :left   :av :top    :title "boxes align horizontal left & vertical top" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :center :av :top    :title "boxes align horizontal center & vertical top" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :right  :av :top    :title "boxes align horizontal right & vertical top" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :left   :av :middle :title "boxes align horizontal left & vertical middle" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :center :av :middle :title "boxes align horizontal center & vertical middle" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :right  :av :middle :title "boxes align horizontal right & vertical middle" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :left   :av :bottom :title "boxes align horizontal left & vertical bottom" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :center :av :bottom :title "boxes align horizontal center & vertical bottom" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :right  :av :bottom :title "boxes align horizontal right & vertical bottom" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c"))
    (test :ah :left  :av :top :title "boxes align horizontal left & vertical top" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :center :av :top :title "boxes align horizontal center & vertical top" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :right  :av :top :title "boxes align horizontal right & vertical top" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :left  :av :middle :title "boxes align horizontal left & vertical middle" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :center :av :middle :title "boxes align horizontal center & vertical middle" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :right  :av :middle :title "boxes align horizontal right & vertical middle" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :left  :av :bottom :title "boxes align horizontal left & vertical bottom" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :center  :av :bottom :title "boxes align horizontal center & vertical bottom" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :right  :av :bottom :title "boxes align horizontal right & vertical bottom" :pass true
      (box :h 60 "a")
      (box :h 40 "b")
      (box :h 20 "c")
      (box :h 40 "d")
      (box :h 60 "e")
      (box :h 60 "f")
      (box :h 40 "g")
      (box :h 20 "h")
      (box :h 40 "i")
      (box :h 40 "j"))
    (test :ah :center  :av :middle :title "box in cell aligns horizontal center & vertical center" :pass false
      (cell (box "a"))))

  (suite :title "layouts"

    (test :ah :center :av :middle :title "elem % sizes to column width set by sibling" :pass false
      (u/elem
        (box :w (rt 1 1) "a")
        (box "b")))
    (test :ah :center :av :middle :title "fonts below size 16 adjust vertical position of siblings" :pass false
      ;; caused by
      (u/elem
        (u/elem :f 10 "a")
        (box "b")))
    (test :ah :center :av :middle :title "elem of fixed width remains constant when gutter is applied to parent." :pass false
      ;; solution: apply lengths to middle, but percentages to outer
      (u/elem :g 50
        (box "a"))))
    (test :ah :center :av :middle :title "elem sizes to width of attribute in cell" :pass false
      (u/elem
        (box :w (cell 80) "a")))
  (suite :title "controls"
      (u/button :w 300 :h 150 "Click Me")
      (u/button :w 150 :h 75 :fc :white "Click Me")
      (u/button :w 300 :h 200 "Click Me")
      (u/button :w 300 :h 200 "Click Me")
    #_(u/elem :h 25 :w [(rt 1 1) sm (ev - (rt 1 1) 220)] :ah :right :g 6)))
